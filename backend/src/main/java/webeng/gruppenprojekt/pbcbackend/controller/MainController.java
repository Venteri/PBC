package webeng.gruppenprojekt.pbcbackend.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import webeng.gruppenprojekt.pbcbackend.models.Category;
import webeng.gruppenprojekt.pbcbackend.models.SuperCategory;
import webeng.gruppenprojekt.pbcbackend.repository.CategoryRepository;
import webeng.gruppenprojekt.pbcbackend.repository.SuperCategoryRepository;

import javax.swing.text.html.Option;
import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/pbc") // This means URL's start with /demo (after Application path)
public class MainController {



        @Autowired // This means to get the bean called userRepository
        // Which is auto-generated by Spring, we will use it to handle the data
        private SuperCategoryRepository superCategoryRepository;

        @Autowired
        private CategoryRepository categoryRepository;

        @PostMapping(path="/super-category") // Map ONLY POST Requests
        public @ResponseBody String addNewSuperCategory (@RequestParam String name)
        {
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestParam means it is a parameter from the GET or POST request

            SuperCategory superCategory = new SuperCategory();
            superCategory.setScatName(name);
            superCategoryRepository.save(superCategory);
            return "Saved";
        }

        @GetMapping(path="/super-category")
        public @ResponseBody Iterable<SuperCategory> getAllSuperCategories()
        {
            // This returns a JSON or XML with the users
            return superCategoryRepository.findAll();
        }

        @GetMapping(path="/super-category-by-name")
        public @ResponseBody Iterable<SuperCategory> getSuperCategoryByName (@RequestParam String name)
        {
            return superCategoryRepository.findByScatName(name);
        }

    @PostMapping(path="/category")
    public @ResponseBody String addNewCategory (@RequestParam String name, @RequestParam Integer scatId)
    {
        Optional<SuperCategory> superCategoryOptonal = superCategoryRepository.findById(scatId);

        if (!superCategoryOptonal.isPresent()) {
            //TODO error handling, maybe try catch block?
        }
        SuperCategory superCategory = superCategoryOptonal.get();
        Category category = new Category(name, superCategory);
        categoryRepository.save(category);
        return "Saved";
    }

    @GetMapping(path="/category")
    public @ResponseBody Iterable<Category> getAllCategories()
    {
        // This returns a JSON or XML with the users
        return categoryRepository.findAll();
    }

    @GetMapping(path="/category-by-name")
    public @ResponseBody Iterable<Category> getCategoryByName (@RequestParam String name)
    {
        return categoryRepository.findByCatName(name);
    }
}

